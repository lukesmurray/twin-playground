/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  webpack: (config, { isServer, webpack }) => {
    if (!isServer) {
      /**
       * babel plugin macros tries to import cosmiconfig but cosmiconfig does not
       * work in the browser. https://github.com/kentcdodds/babel-plugin-macros/issues/186#issuecomment-1077720900
       * This might not be an issue but in nextjs it is a build error and you can't render
       * your site until the build error is fixed
       */
      config.plugins.push(
        new webpack.IgnorePlugin({
          /**
           * check whether a resource and context should be ignored
           * @param {string} resource the string that is being imported
           * @param {string} context the absolute path of the file that is importing the resource
           * @returns {boolean} true if the resource should be ignored
           */
          checkResource(resource) {
            // ensure cosmiconfig is not included in the client bundle
            return resource.match(/^cosmiconfig$/);
          },
        })
      );

      // add NODE_ENV to the client bundle. It is used in the code generated by
      // twin.macro during babel transpilation
      config.plugins.push(
        new webpack.DefinePlugin({
          "process.env.NODE_ENV": JSON.stringify(process.env.NODE_ENV),
        })
      );

      // emotion-babel-plugin and twin.macro both import fs
      // which is not included in the browser
      // to avoid a module not found error we set resolve.fallback to false
      config.resolve.fallback = {
        ...(config.resolve.fallback || {}),
        fs: false,
      };
    }

    /**
     * babel-plugin-macros strips macro imports from the bundle.
     * Because we're using babel-plugin-macros ourselves, we have to dynamically import
     * twin at runtime to "hide" the import from babel-plugin-macros
     * so that it is available in the live coding environment.
     *
     * also if we manually import css from "emotion/react" it breaks the css prop.
     * in order to have css available in the live coding environment we have to
     * dynamically import it.
     *
     * We also had to change the target in tsconfig.json to esnext
     */
    config.experiments.topLevelAwait = true;

    return config;
  },
  productionBrowserSourceMaps: true,
};

module.exports = nextConfig;
